8 Eventflags
 Createamultitaskingprogramtodemonstrateeventflagstosynchronizetaskexecution.Cre
atefourtaskstosimulatetheoperationofasteppermotordriver.UsefourLEDsblinkingto
 simulatetheactivationof thefouroutputdriverstages.Createanotherconcurrentlyexecut
ingtasktodisplaytextonGLCD.Controltheexecutionoftasksusedtosimulatethestepper
 motorexcitationbyinsertingeventsatsuitablestatements. UseAPIsofRL-ARMreal-time
 kernel.


 #include <LPC18xx.h>
 #include "RTL.h"
 #include "LED.h"
 #include "GLCD.h"
 OS_TID t_phaseA, t_led2, t_led3, t_led4, t_lcd;
 OS_MUT mut_GLCD;
 #define LED_A 1
 #define LED_B 2
 #define LED_C 3
 #define LED_D 4
 void Switch_On(unsigned char led) {
 LED_On(led);
 }
 void Switch_Off(unsigned char led) {
 LED_Off(led);
 }
 void signal_func(OS_TID task) {
 os_dly_wait(100);
 os_evt_set(0x0001, task);
 os_dly_wait(50);
 }
 __task void phaseA(void) {
 while (1) {
 os_evt_wait_and(0x0001, 0xffff);
 Switch_On(LED_A);
 signal_func(t_led2);
 Switch_Off(LED_A);
 }
 }
 __task void led2(void) {
 while (1) {
 os_evt_wait_and(0x0001, 0xffff);
 Switch_On(LED_B);
 signal_func(t_led3);
 Switch_Off(LED_B);
 }
 }
 __task void led3(void) {
 while (1) {
 os_evt_wait_and(0x0001, 0xffff);
 Switch_On(LED_C);
 signal_func(t_led4);
 Switch_Off(LED_C);
 }
 }
 __task void led4(void) {
 while (1) {
 os_evt_wait_and(0x0001, 0xffff);
 Switch_On(LED_D);
 signal_func(t_phaseA);
 Switch_Off(LED_D);
 
}
 }
 __task void lcd(void) {
 while (1) {
 os_mut_wait(&mut_GLCD, 0xffff);
 GLCD_SetBackColor(Blue);
 GLCD_SetTextColor(White);
 GLCD_DisplayString(0, 0, 1, "Hello");
 GLCD_DisplayString(1, 0, 1, "World");
 os_mut_release(&mut_GLCD);
 os_dly_wait(100);
 os_mut_wait(&mut_GLCD, 0xffff);
 GLCD_SetBackColor(Black);
 GLCD_SetTextColor(White);
 GLCD_DisplayString(0, 0, 1, "RVCE");
 GLCD_DisplayString(1, 0, 1, "VLSI & ES");
 os_mut_release(&mut_GLCD);
 os_dly_wait(100);
 }
 }
 __task void init(void) {
 os_mut_init(&mut_GLCD);
 t_phaseA = os_tsk_create(phaseA, 0);
 t_led2 = os_tsk_create(led2, 0);
 t_led3 = os_tsk_create(led3, 0);
 t_led4 = os_tsk_create(led4, 0);
 t_lcd = os_tsk_create(lcd, 0);
 os_evt_set(0x0001, t_phaseA);
 os_tsk_delete_self();
 }
 int main() {
 LED_Init();
 GLCD_Init();
 GLCD_Clear(White);
 os_sys_init(init);
 }
         //  Listing13:Blinky.c


or 


#include<RTL.h> 
#include<LPC18xx.h> 
#include “LED.h” 
#include “GLCD.h” 
OS_TID t_led1 ,t_led2,t_led3,t_led4,t_lcd;

#define LED_A 1 
#define LED_B 2 
#define LED_C 3 
#define LED_D 4

__task void led1(void){ 
While(1){
os_evt_wait_and(0x0001,0xffff);   // API of signals - 
LED_On(LED_A); 
os_evt_set(0x0001,t_led2);
LED_Off(LED_A); 
os_dly_wait(100);
}
}

__task void led2(void){ 
While(1){
os_evt_wait_and(0x0001,0xffff);   // API of signals - 
LED_On(LED_B); 
os_evt_set(0x0001,t_led3);
LED_Off(LED_B); 
os_dly_wait(100);
}
}

__task void led3(void){ 
While(1){
os_evt_wait_and(0x0001,0xffff);   // API of signals - 
LED_On(LED_C); 
os_evt_set(0x0001,t_led4);
LED_Off(LED_C); 
os_dly_wait(100);
}
}

__task void led4(void){ 
While(1){
os_evt_wait_and(0x0001,0xffff);   // API of signals - 
LED_On(LED_D); 
os_evt_set(0x0001,t_led1);
LED_Off(LED_D); 
os_dly_wait(100);
}
}

__task void lcd(void){
While(1){ 
GLCD_SetBackColor(Black); 
GLCD_SetTextColor(White); 
GLCD_DisplayString(0,0,1,”LCD”); 
os_dly_wait(100); 

GLCD_SetBackColor(Green); 
GLCD_SetTextColor(Red); 
GLCD_DisplayString(0,0,1,”LCD”); 
os_dly_wait(100); 
} 
}

__task void init(void){ 
t_led1=os_tsk_create(led1,0); 
t_led2=os_tsk_create(led2,0); 
t_led3=os_tsk_create(led3,0); 
t_led4=os_tsk_create(led4,0); 
t_lcd=os_tsk_create(lcd,0); 
os_evt_set(0x0001,t_led1); 
os_tsk_delete_self(); 
}

Int main(){ 
LED_Init(); 
GLCD_Init(); 
GLCD_Clear(White); 
os_sys_init(init); 
}
